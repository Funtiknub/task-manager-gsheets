import json
import os  # Нужен для проверки существования файла
from google_sheets_sync import GoogleSheetsSync
from datetime import datetime

class Пользователь:
    def __init__(self, имя):
        self.имя = имя
        self.задачи = []

class СписокДел:
    def __init__(self):
        self.пользователи = {}
        self.google_sync = GoogleSheetsSync()
        self.загрузить_данные()  # Загружаем данные при создании объекта

    def загрузить_данные(self):
        if os.path.exists('tasks.json'):
            try:
                with open('tasks.json', 'r', encoding='utf-8') as file:
                    данные = json.load(file)
                    for имя, задачи in данные.items():
                        пользователь = Пользователь(имя)
                        пользователь.задачи = задачи
                        self.пользователи[имя] = пользователь
            except json.JSONDecodeError:
                print("Ошибка при чтении файла данных.")

    def сохранить_данные(self):
        данные = {}
        for имя, пользователь in self.пользователи.items():
            данные[имя] = пользователь.задачи
        try:
            with open('tasks.json', 'w', encoding='utf-8') as file:
                json.dump(данные, file, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"Ошибка при сохранении данных: {e}")

    def добавить_пользователя(self, имя):
        if имя not in self.пользователи:
            self.пользователи[имя] = Пользователь(имя)
            print(f"Пользователь '{имя}' добавлен!")
            self.сохранить_данные()  # Сохраняем после добавления пользователя
        else:
            print(f"Пользователь '{имя}' уже существует!")

    def добавить_задачу(self, имя_пользователя, задача, тихий_режим=False):
        if имя_пользователя in self.пользователи:
            self.пользователи[имя_пользователя].задачи.append({"задача": задача, "выполнено": False})
            if not тихий_режим:  # Выводим сообщение только если не в тихом режиме
                print(f"Задача '{задача}' добавлена для пользователя {имя_пользователя}!")
            self.сохранить_данные()
        else:
            print(f"Пользователь '{имя_пользователя}' не найден!")

    def удалить_задачу(self, имя_пользователя, индекс_задачи):
        if имя_пользователя in self.пользователи:
            try:
                задача = self.пользователи[имя_пользователя].задачи.pop(индекс_задачи)
                print(f"Задача '{задача['задача']}' удалена у пользователя {имя_пользователя}!")
                self.сохранить_данные()  # Сохраняем после удаления задачи
            except IndexError:
                print("Неверный индекс задачи.")
        else:
            print(f"Пользователь '{имя_пользователя}' не найден!")

    def отметить_выполненной(self, имя_пользователя, индекс_задачи):
        if имя_пользователя in self.пользователи:
            try:
                # Проверяем на отмену действия
                if индекс_задачи == 0:
                    print("Действие отменено")
                    return

                # Проверяем на добавление новой задачи
                if индекс_задачи == 99:  # изменили на 99
                    новая_задача = input("\nВведите текст новой задачи: ")
                    if новая_задача.strip():
                        # Добавляем задачу сразу как выполненную
                        self.пользователи[имя_пользователя].задачи.append({
                            "задача": новая_задача,
                            "выполнено": True
                        })
                        print(f"\nЗадача '{новая_задача}' добавлена и отмечена как выполненная!")
                        self.сохранить_данные()
                    return

                # Корректируем индекс
                индекс_задачи -= 1
                
                # Получаем текущую задачу
                задача = self.пользователи[имя_пользователя].задачи[индекс_задачи]
                
                # Показываем текущий текст задачи
                print(f"\nТекущий текст задачи: {задача['задача']}")
                
                # Спрашиваем подтверждение
                подтверждение = input("Отметить задачу как выполненную? (да/нет): ").lower()
                if подтверждение != 'да':
                    print("Действие отменено")
                    return
                
                # Спрашиваем про редактирование
                редактировать = input("Хотите добавить комментарий к выполненной задаче? (да/нет): ").lower()
                
                if редактировать == 'да':
                    новый_текст = input("Введите обновленный текст задачи: ")
                    задача['задача'] = новый_текст
                
                задача['выполнено'] = True
                print(f"Задача '{задача['задача']}' отмечена как выполненная!")
                self.сохранить_данные()
            except IndexError:
                print("Неверный индекс задачи.")
        else:
            print(f"Пользователь '{имя_пользователя}' не найден!")

    def показать_задачи(self, имя_пользователя):
        if имя_пользователя in self.пользователи:
            задачи = self.пользователи[имя_пользователя].задачи
            if not задачи:
                print(f"У пользователя {имя_пользователя} нет задач.")
            else:
                print(f"\nЗадачи пользователя {имя_пользователя}:")
                for idx, задача in enumerate(задачи):
                    статус = "Выполнено" if задача["выполнено"] else "В работе"
                    print(f"{idx + 1}. {задача['задача']} - {статус}")
        else:
            print(f"Пользователь '{имя_пользователя}' не найден!")

    def синхронизировать_с_таблицей(self, имя_пользователя):
        """Синхронизация задач с Google таблицей"""
        if имя_пользователя not in self.пользователи:
            print(f"Пользователь '{имя_пользователя}' не найден!")
            return

        if self.google_sync.отправить_задачи(имя_пользователя, self.пользователи[имя_пользователя].задачи):
            print("Задачи успешно синхронизированы с таблицей!")
        else:
            print("Не удалось синхронизировать задачи.")

    def добавить_задачи(self, имя_пользователя):
        if имя_пользователя not in self.пользователи:
            print(f"Пользователь '{имя_пользователя}' не найден!")
            return
        
        print("\nВведите или вставьте задачи (каждая с новой строки).")
        print("Для завершения ввода оставьте строку пустой и нажмите Enter.")
        
        номер = len(self.пользователи[имя_пользователя].задачи) + 1
        
        while True:
            строка = input().strip()
            if not строка:  # Если строка пустая - завершаем ввод
                break
            if строка:  # Проверяем, что строка не пустая
                новая_задача = {
                    'задача': строка,
                    'выполнено': False,
                    'комментарий': ''
                }
                self.пользователи[имя_пользователя].задачи.append(новая_задача)
                print(f"Добавлена задача {номер}: {строка}")
                номер += 1
        
        if номер > len(self.пользователи[имя_пользователя].задачи):
            self.сохранить_данные()
            print("\nЗадачи успешно добавлены")
        else:
            print("Задачи не были добавлены")

    def настроить_доступ_к_таблице(self):
        try:
            настройки = {}
            if os.path.exists('sheet_settings.json'):
                with open('sheet_settings.json', 'r', encoding='utf-8') as file:
                    настройки = json.load(file)
                    if 'exceptions' not in настройки:
                        настройки['exceptions'] = {
                            'additional_workdays': [],
                            'removed_workdays': []
                        }
            
            while True:
                print("\n----- Настройка доступа к Google Таблице -----")
                print("1. Изменить основные данные")
                print("2. Управление исключениями")
                print("3. Выход в главное меню")
                
                выбор = input("\nВыберите действие: ").strip()
            
                if выбор == "1":
                    # Запрашиваем URL таблицы
                    url = input("Введите URL таблицы: ").strip()
                    if url:
                        настройки['spreadsheet_id'] = url
                    
                    # Запрашиваем начальную дату
                    начальная_дата = input("Введите дату начала (в формате ДД.ММ.ГГГГ): ").strip()
                    if начальная_дата:
                        try:
                            datetime.strptime(начальная_дата, '%d.%m.%Y')
                            настройки['start_date'] = начальная_дата
                        except ValueError:
                            print("Неверный формат даты! Используйте ДД.ММ.ГГГГ")
                            continue
                    
                    # Запрашиваем день недели
                    print("\nВыберите день недели начала работы:")
                    print("1. Понедельник")
                    print("2. Вторник")
                    print("3. Среда")
                    print("4. Четверг")
                    print("5. Пятница")
                    день_недели = input("Введите номер дня недели (1-5): ").strip()
                    if день_недели and день_недели.isdigit() and 1 <= int(день_недели) <= 5:
                        настройки['start_weekday'] = int(день_недели)
                    else:
                        print("Неверный номер дня недели!")
                        continue
                    
                    # Запрашиваем начальную ячейку
                    начальная_ячейка = input("Введите номер ячейки для начальной даты (например, A1): ").strip()
                    if начальная_ячейка:
                        настройки['start_cell'] = начальная_ячейка
                
                elif выбор == "2":
                    while True:
                        print("\n----- Управление исключениями -----")
                        print("Текущие исключения:")
                        print("\nДополнительные рабочие дни:")
                        for дата in настройки['exceptions']['additional_workdays']:
                            print(f"- {дата}")
                        print("\nУдаленные рабочие дни:")
                        for дата in настройки['exceptions']['removed_workdays']:
                            print(f"- {дата}")
                        
                        print("\n1. Добавить рабочий день")
                        print("2. Удалить рабочий день")
                        print("3. Удалить исключение")
                        print("4. Назад")
                        
                        действие = input("\nВыберите действие: ").strip()
                        
                        if действие == "1":
                            дата = input("Введите дату (ДД.ММ.ГГГГ): ").strip()
                            if self.проверить_формат_даты(дата):
                                if дата not in настройки['exceptions']['additional_workdays']:
                                    настройки['exceptions']['additional_workdays'].append(дата)
                                    print("Рабочий день добавлен")
                        
                        elif действие == "2":
                            дата = input("Введите дату (ДД.ММ.ГГГГ): ").strip()
                            if self.проверить_формат_даты(дата):
                                if дата not in настройки['exceptions']['removed_workdays']:
                                    настройки['exceptions']['removed_workdays'].append(дата)
                                    print("День удален из рабочих")
                        
                        elif действие == "3":
                            print("\nВыберите тип исключения:")
                            print("1. Дополнительный рабочий день")
                            print("2. Удаленный рабочий день")
                            тип = input("Ваш выбор: ").strip()
                            
                            if тип == "1" and настройки['exceptions']['additional_workdays']:
                                print("\nСписок дополнительных рабочих дней:")
                                for i, дата in enumerate(настройки['exceptions']['additional_workdays'], 1):
                                    print(f"{i}. {дата}")
                                индекс = input("Введите номер даты для удаления: ").strip()
                                if индекс.isdigit() and 1 <= int(индекс) <= len(настройки['exceptions']['additional_workdays']):
                                    настройки['exceptions']['additional_workdays'].pop(int(индекс) - 1)
                                    print("Исключение удалено")
                            
                            elif тип == "2" and настройки['exceptions']['removed_workdays']:
                                print("\nСписок удаленных рабочих дней:")
                                for i, дата in enumerate(настройки['exceptions']['removed_workdays'], 1):
                                    print(f"{i}. {дата}")
                                индекс = input("Введите номер даты для удаления: ").strip()
                                if индекс.isdigit() and 1 <= int(индекс) <= len(настройки['exceptions']['removed_workdays']):
                                    настройки['exceptions']['removed_workdays'].pop(int(индекс) - 1)
                                    print("Исключение удалено")
                        
                        elif действие == "4":
                            break

                elif выбор == "3":
                    break
                
                # Сохраняем настройки после каждого изменения
                with open('sheet_settings.json', 'w', encoding='utf-8') as file:
                    json.dump(настройки, file, ensure_ascii=False, indent=2)
                print("\nНастройки успешно сохранены!")
                
        except Exception as e:
            print(f"Ошибка при сохранении настроек: {e}")

    def проверить_формат_даты(self, дата):
        """Проверка корректности формата даты"""
        try:
            datetime.strptime(дата, '%d.%m.%Y')
            return True
        except ValueError:
            print("Неверный формат даты! Используйте ДД.ММ.ГГГГ")
            return False

    def отметить_выполнение_задачи(self, имя_пользователя):
        """Отмечает задачу как выполненную и добавляет комментарий"""
        try:
            # Проверяем существование пользователя в self.пользователи
            if имя_пользователя not in self.пользователи:
                print(f"\nПользователь '{имя_пользователя}' не найден")
                return

            if not self.пользователи[имя_пользователя].задачи:
                print("\nНет доступных задач")
                return

            self.показать_задачи(имя_пользователя)
            номер = input("\nВведите номер задачи для отметки выполнения: ")
            
            try:
                номер = int(номер) - 1
                задачи = self.пользователи[имя_пользователя].задачи
                if 0 <= номер < len(задачи):
                    if not задачи[номер]['выполнено']:
                        задачи[номер]['выполнено'] = True
                        новый_комментарий = input("Введите комментарий к выполненной задаче: ")
                        
                        # Получаем существующий комментарий
                        существующий_комментарий = задачи[номер].get('комментарий', '')
                        
                        # Если уже есть комментарий, добавляем новый через пробел
                        if существующий_комментарий:
                            задачи[номер]['комментарий'] = f"{существующий_комментарий} {новый_комментарий}"
                        else:
                            задачи[номер]['комментарий'] = новый_комментарий
                        
                        self.сохранить_данные()  # Используем существующий метод для сохранения
                        print("\nЗадача отмечена как выполненная")
                    else:
                        print("\nЭта задача уже отмечена как выполненная")
                else:
                    print("\nНеверный номер задачи")
            except ValueError:
                print("\nОшибка: введите корректный номер задачи")

        except Exception as e:
            print(f"\nОшибка при отметке выполнения задачи: {e}")

    def удалить_все_задачи(self, имя_пользователя):
        if имя_пользователя in self.пользователи:
            self.пользователи[имя_пользователя].задачи = []
            print(f"Все задачи пользователя {имя_пользователя} удалены!")
            self.сохранить_данные()
        else:
            print(f"Пользователь '{имя_пользователя}' не найден!")

def главная():
    print("\n----- Система управления задачами -----")
    имя = input("Введите имя пользователя: ")
    список_дел = СписокДел()
    список_дел.добавить_пользователя(имя)
    
    while True:
        print(f"\n----- Меню пользователя: {имя} -----")
        print("1. Работа с задачами")
        print("2. Отметить задачу как выполненную")
        print("3. Показать задачи")
        print("4. Настройка доступа Google Таблицы")
        print("5. Синхронизировать с Google Таблицей")
        print("6. Выход")
        
        выбор = input("Выберите действие: ")
        
        if выбор == "1":
            while True:
                print("\n----- Добавление задач -----")
                print("1. Добавить задачи")
                print("2. Редактировать задачи")
                print("3. Удалить все задачи")
                print("4. Вернуться в главное меню")
                
                действие = input("Выберите действие: ")
                if действие == "1":
                    список_дел.добавить_задачи(имя)
                elif действие == "2":
                    список_дел.показать_задачи(имя)
                    print("\nВыберите действие:")
                    print("0. Отмена")
                    print("1-N. Номер задачи для отметки как выполненной")
                    print("99. Добавить и отметить новую задачу как выполненную")
                    
                    try:
                        индекс_задачи = int(input("\nВаш выбор: "))
                        список_дел.отметить_выполненной(имя, индекс_задачи)
                    except ValueError:
                        print("Пожалуйста, введите правильный номер.")
                elif действие == "3":
                    список_дел.удалить_все_задачи(имя)
                elif действие == "4":
                    break
                else:
                    print("Неверный выбор. Пожалуйста, выберите число от 1 до 4.")
        
        elif выбор == "2":
            список_дел.отметить_выполнение_задачи(имя)
        
        elif выбор == "3":
            список_дел.показать_задачи(имя)
        
        elif выбор == "4":
            список_дел.настроить_доступ_к_таблице()
        
        elif выбор == "5":
            список_дел.синхронизировать_с_таблицей(имя)
        
        elif выбор == "6":
            print("До свидания!")
            break
        
        else:
            print("Неверный выбор. Попробуйте снова.")

if __name__ == "__main__":
    главная()
